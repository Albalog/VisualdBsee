.* ----------------------------------------------------------------------------
.* TEMPLATE     : DBRID
.* RELEASE      : 4.1
.* VERSION      :
.* DESCRIZIONE  : Funzioni per controllo integrit… dati
.* ----------------------------------------------------------------------------
.do GenUsrM
.out ÛtSourcePath()+"\"+alltrim(oo_obj->PRG)Û.prg
.do info with trim(oo_obj->ObjDes), tSourcePath()+"\"+alltrim(oo_obj->prg)+[.prg] ,tGenTemplate()
.M->cTdbf := ""

#INCLUDE "Common.ch"
#INCLUDE "dfWin.ch"
#INCLUDE "dfGenMsg.ch"
.inj rid1  Inizio file dbRid - Punto per dichiarazione INCLUDE e STATIC GLOBALI

/*
   TRANSAZIONI SU FILE
*/

.foreach file
   .M->cTdbf   := tDbfAliasName()
   .oo_trn->(dbSetOrder(1))
   .if oo_trn->(dbSeek(dd_dbf->FILE))
.do dbrid1
   .endif
.next

/*
   INTEGRITA' DATI SUI FILE (CANCELLAZIONE RECORD)
*/
.foreach file dd_dbf->FILE_TYP != "1"  ./  per tutti i file di tipologia non tabellare
   .m->cTFileFat := tDbfAliasName()

*******************************************************************************
FUNCTION ÛcTFileFatÛDid()  ð // Delete Integrity Data ÛTrim(dd_dbf->FILE_DES)Û
*******************************************************************************
   .lTFoundRes := .F.
   .lTFoundNul := .F.
   .lTFoundCas := .F.
   .lTFoundPre := .F.
   .M->aTals   := {}
   .foreach integritysons
      .M->cTals   := tGetAliasName( dd_rel->FILE1 )
      .M->RelType := toRelation("refintdel")
      .do case
         .case RelType == "0"          ./ relazioni in RESTRICT
              .lTFoundRes := .T.
         .case RelType == "1" .and. dd_rel->RELTYP == "2"  ./ relazioni in NULLIFY per 1:N
              .lTFoundNul := .T.
         .case RelType == "2"          ./ relazioni in CASCADE
              .lTFoundCas := .T.
         .case RelType == "4"          ./ relazioni in PREVENT
              .lTFoundPre := .T.
      .endcase
      .if Ascan( aTals ,{ |x| x == AllTrim(cTals) } ) == 0
         .if RelType!="3" ./ IGNORE - Remove the file
            .aadd(  aTals ,AllTrim(cTals) )
         .endif
      .endif
   .next
   .if lTFoundNul                   ./ se esiste almeno una relazione in NULLIFY
LOCAL aRecPos   := {}    ð // array di recno() per posizionamenti chiavi straniere
   .endif
   .if lTFoundRes .OR. lTFoundNul   ./ se esiste almeno una relazione in RESTRICT o NULLIFY
LOCAL aInfoFile := {}    ð // array di recno() e indexord() file in RESTRICT
   .endif
   .if lTFoundCas .OR. lTFoundNul .OR. lTFoundRes ./ se esiste almeno una relazione in CASCADE o NULLIFY o RESTRICT
LOCAL nRecPos   := 0     ð // recno() file corrente
   .endif
LOCAL nCnt      := 0     ð // contatore array di recno()
LOCAL lRet      := .T.   ð // valore di ritorno
   .*
   .M->nTCnt := 1
   .M->nTlen := Len(aTals)
   .if nTlen > 0
LOCAL aFile := {}
   .endif
.tPutInj( 0 ,[.inj DFF1] )

   .if nTlen > 0
BEGIN SEQUENCE
      .do while nTCnt  <= nTlen
      IF ! dfUse( "ÛaTals[nTcnt]Û" ,NIL ,aFile ) ;BREAK  ;END
         .M->nTCnt := nTcnt +1
      .enddo
RECOVER
   dfClose( aFile, .T., .T. ) ð //  Chiude i file aperti in questa funzione
   RETURN .F.
END
   .endif
   .*
   .if m->lTFoundPre   ./ se esiste almeno una relazione in PREVENT

// Risulta definita una integrita' referenziale di tipo PREVENT
// a partire dal file Ûm->cTFileFatÛ:
// la cancellazione del record corrente NON pu• avvenire
dfClose( aFile, .T., .T. )    ð //  Chiude i file aperti in questa funzione
RETURN .F.
   .else
   .if m->lTFoundRes   ./ se esiste almeno una relazione in RESTRICT

// integrita' referenziale in modalita' RESTRICT :
// la cancellazione del record corrente pu• avvenire
// esclusivamente se non esistono chiavi straniere
BEGIN SEQUENCE

   .endif
   .foreach integritysons toRelation("refintdel") == "0"          ./ relazioni in RESTRICT
           .m->cTFileSon := tGetAliasName(dd_rel->FILE1)
           .*
           .*
// integrita' referenziale in modalita' RESTRICT tra file Ûm->cTFileFat +" e "+m->cTFileSonÛ
Aadd( aInfoFile, { {|nInd, nRec| Ûm->cTFileSonÛ->(OrdSetFocus(nInd)),;ð
                                 Ûm->cTFileSonÛ->(dbGoto(nRec))}   ,;ð
                                 Ûm->cTFileSonÛ->(IndexOrd())      ,;ð
                                 Ûm->cTFileSonÛ->(recno())         })
   ÛcTFileSon+"->(OrdSetFocus("+alltrim(str(dd_ndx->NDXINCN))+"))"Û
           .M->cTRelKey := ToRelation('relkey')
           .if empty( M->cTRelKey )
               .M->cTRelKey := [""]
           .endif
   IF ÛcTFileSon+"->(dbSeek("+M->cTRelKey+"))"Û
      dbMsgErr( dfStdMsg(MSG_DBRID01) )
      BREAK
   END
   .next

   .if m->lTFoundRes   ./ se esiste almeno una relazione in RESTRICT
RECOVER
   lRet := .F.
END

/*
  ripristino posizioni precedenti file in RESTRICT
*/

FOR nCnt := 1 TO len( aInfoFile )
    eVal( aInfoFile[nCnt,1], aInfoFile[nCnt,2], aInfoFile[nCnt,3] )
NEXT

IF !lRet
      .if nTlen > 0
   dfClose( aFile, .T., .T. )    ð //  Chiude i file aperti in questa funzione
      .endif
   RETURN lRet         ð //  esiste almeno una chiave straniera
ENDIF

   .endif

   .tPutInj( 0 ,[.inj DFF2] )

   .foreach integritysons toRelation("refintdel") $ "1-2"   ./ relazioni in NULLIFY-CASCADE
      .m->ctRITyp   := torelation("refintdel")              ./ tipo integrit… CASCADE/NULLYFY
      .m->cTFileSon := tGetAliasName( dd_rel->FILE1 )       ./ file figlio di relazione
      .if m->ctRITyp == "1"      ./ NULLIFY
// integrita' referenziale in modalita' NULLIFY tra file Ûm->cTFileFat +" e "+m->cTFileSonÛ

         .if dd_rel->RELTYP == "2"  ./  RELAZIONE 1:N
aRecPos := {}    ð // reset array di recno() per posizionamenti chiavi straniere
         .endif
      .else                      ./ CASCADE
// integrita' referenziale in modalita' CASCADE tra file Ûm->cTFileFat +" e "+m->cTFileSonÛ

      .endif
ÛcTFileSon+"->(OrdSetFocus("+alltrim(str(dd_ndx->NDXINCN))+"))"Û
      .M->cTRelKey := ToRelation('relkey')
      .if empty( M->cTRelKey )
ÛcTFileSonÛ->(dbGoBottom())
ÛcTFileSonÛ->(dbSkip(1))
      .else
ÛcTFileSon+"->(dbSeek("+M->cTRelKey+"))"Û
      .endif
      .if dd_rel->RELTYP == "2"  ./  RELAZIONE 1:N
          .M->cTexp  := ToRelation('relbreak')
          .M->cTexpF := ToRelation('relfilter')
          .if m->ctRITyp == "1"  ./ Nullify
WHILE( !(ÛcTexp+") .AND. !"+cTFileSonÛ->(EOF()) )
      IF !(ÛcTexpFÛ)
         ÛcTFileSonÛ->(dbSkip(1))
         LOOP
      ENDIF
          .else
WHILE( ÛcTFileSonÛ->(dfChkDidExp( Ûalltrim(str(dd_ndx->NDXINCN))Û ,; // Index
   {||ÛcTRelKeyÛ} ,; // Key
   {||ÛcTexpFÛ} ,; // Filter
   {||ÛcTexpÛ} ))) // Break
          .endif
          .if m->ctRITyp == "1"  ./ NULLIFY
   //  chiavi straniere da rendere nulle per cancellazione chiave principale
   //  inizializzazione array di recno()

   aAdd( aRecPos, ÛcTFileSonÛ->(recno()) ) ð //  recno occorrenza chiave straniera

          .else                  ./ CASCADE
   nRecPos   := Ûm->cTFileSonÛ->(recno()) ð // salvataggio recno() file corrente
   Ûm->cTFileSonÛDid()
   ÛcTFileSon+"->(OrdSetFocus("+alltrim(str(dd_ndx->NDXINCN))+"))"Û
   Ûm->cTFileSonÛ->(dbGoto(nRecPos))      ð // si ripristina recno() file corrente

          .endif
          .*
   ÛcTFileSonÛ->(dbSkip(1))
ENDDO
      .else       ./  RELAZIONE 1:1
IF !ÛcTFileSonÛ->(EOF())
         .if m->ctRITyp == "1"  ./ NULLIFY
   //  chiave straniera da rendere nulla per cancellazione chiave principale
             .foreach nullifyvalue  ./  per tutti i campi da rendere nulli
   ÛcTFileSonÛ->(dfNullify("Ûtrim(dd_sym->SYM_NAM)Û"))
             .next  ./  END foreach campi nulli
             .*
         .else                  ./ CASCADE
             .*
   nRecPos   := Ûm->cTFileSonÛ->(recno()) ð // salvataggio recno() file corrente
   Ûm->cTFileSonÛDid()
   ÛcTFileSon+"->(OrdSetFocus("+alltrim(str(dd_ndx->NDXINCN))+"))"Û
   Ûm->cTFileSonÛ->(dbGoto(nRecPos))      ð // si ripristina recno() file corrente
         .endif
ENDIF

         .*
      .endif
      .if m->ctRITyp == "1" .and. dd_rel->RELTYP == "2" ./ NULLIFY IN 1:N
// NULLIFY CHIAVI STRANIERE FILE ÛcTFileSonÛ

FOR nCnt := 1 to len(aRecPos)
    ÛcTFileSonÛ->(dbGoto(aRecPos[nCnt]))
         .foreach nullifyvalue  ./  per tutti i campi da rendere nulli
    ÛcTFileSonÛ->(dfNullify("Ûtrim(dd_sym->SYM_NAM)Û"))
         .next  ./  END foreach campi nulli
NEXT

      .endif
      .*
   .next  ./ END foreach relazioni in NULLIFY-CASCADE
   .*
// CANCELLAZIONE RECORD CORRENTE
   .if oo_trn->(dbSeek(dd_dbf->FILE+"1"))
Ûm->cTFileFatÛTrn( "rtt" )                      ð // REMOVE THE TRANSACTION
   .endif
   .if oo_trn->(dbSeek(dd_dbf->FILE+"2"))
Ûm->cTFileFatÛTrn( "ltt" ,DE_STATE_DEL )        ð // LOG    THE TRANSACTION
   .endif
.tPutInj( 0 ,[.inj DFF8] )
Ûm->cTFileFatÛ->(dbDelete())
.tPutInj( 0 ,[.inj DFF9] )
   .if nTlen > 0
dfClose( aFile, .T., .T. )    ð //  Chiude i file aperti in questa funzione
   .endif

RETURN lRet
   .endif

.next
.if !tExistDbf()
*******************************************************************************
STATIC FUNCTION dmm_udf() ;RETURN .F.
*******************************************************************************
.endif
.inj rid9  Fine file dbRid - Punto per inserimento funzioni utente

.close
.dbusrOld()
