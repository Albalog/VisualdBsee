.* ----------------------------------------------------------------------------
.* TEMPLATE     : EXOSPACE
.* RELEASE      : 4.0
.* VERSION      : d
.* DESCRIZIONE  : Script per l'operazione di Link con Exospaceø
.* ----------------------------------------------------------------------------
.tExeBuild()
.do GenUsrM
.M->MstObjRec := oo_obj->(recno())
.out ÛtSourcePath()+"\"+alltrim(oo_obj->PRG)+"."+oo_obj->EXTÛ
.msg [GENERA :]+trim(oo_obj->ObjDes)+[ : ]+tSourcePath()+"\"+alltrim(oo_obj->prg)+[.]+oo_obj->EXT

#  ZONA COMANDI EXOSPACE
EXOSPACE PROCEDURE DEPTH 60
EXOSPACE EXECUTABLE NODELETE
EXOSPACE EXECUTABLE CLIPPER F100;R20

#
#  Con ExoSpace e' necessario specificare che si usano accessi diretti alle
#  interrupt 10/25-26/33/5C/7A
#
#  La linea seguente dovrebbe evitare che il programma si blocchi durante
#  un'accesso ad una delle interrupt sopra descritte
#
.if toExeEnv("compiler")=="1"
EXOSPACE PACKAGE INT10, DOS25, NET5C, IPX, MOUSE
.endif
.if toExeEnv("compiler")=="2"
EXOSPACE PACKAGE INT10, DOS25, NET5C, IPX
.endif

MAP S,A

.inj LNK2 Dopo la zona comandi standard file script per EXOSPACE

.M->cTOut := toExeEnv("outputexe")
OUTPUT Ûif( empty(cTout),"..\EXE\",cTout+"\")+ALLTRIM(oo_exe->ExeName)Û

.M->cTini := tInitProc()
ÛTgetCom("fi")+" "+cTiniÛ

#  LIBRERIA EXOSPACE
#
#  La Libreria Exospace DEVE essere posta appena dopo la definizione del
#  obj MAIN, in quanto e' necessario che tutti gli OBJ di ExoSpace vadano a
#  sovrapporsi a quelli di Clipper
#
LIB exospace

#  LIBRERIA PER DEBUGGER
#
#  Per poter fare il DEBUG di un programma linkato con ExoSpace e' necessario
#  linkare la libreria del debugger in chiaro con un FI
#  Il tutto deve essere fatto DOPO aver incluso la libreria di ExoSpace
#  Per attivare percio' il Debugger togliete il comento (#) dalla riga seguente
#
#FI CLD.LIB

#  FILE SPECIALI
.foreach link oo_bld->typ=="spc" .and. oo_bld->wdo=="prg" .and. oo_bld->SECTION=="0"
ÛTgetCom("fi")+" "+alltrim(oo_obj->PRG)Û
.next

#  FILE EXTERNAL
.foreach link oo_bld->typ=="ext" .and. oo_bld->SECTION=="0"
.M->cPath := if(!empty(toObject("objectpath")),toObject("objectpath")+[\],[])
ÛTgetCom("fi")+" "+cPath+alltrim(oo_obj->PRG)Û
.next

#  OGGETTI Visual dBSEE
.foreach link oo_bld->typ $ "drv-frm-brw-prn-qry" .and. oo_bld->SECTION=="0"
   .M->cTprg := AllTrim(oo_obj->PRG)
   .if Lower(cTini) != Lower(cTprg)
ÛTgetCom("fi")+" "+cTprgÛ
   .endif
.next

.inj LNK3 Prima delle librerie e del Beginarea in ROOT

#  LIBRERIE IN ROOT
.if toExeEnv("compiler")=="2"
Lib dBsee453
.endif
Lib dBsee4re
.foreach link oo_bld->typ=="lib" .and. oo_bld->SECTION=="0"
.M->cPath := if(!empty(toObject("objectpath")),toObject("objectpath")+[\],[])
ÛTgetCom("Lib")+" "+cPath+alltrim(oo_obj->PRG)+"."+oo_obj->EXTÛ
.next

BEGINAREA

   .inj LNK4 All'interno BEGINAREA file script per EXOSPACE

   #  FILE SPECIALI
.foreach link oo_bld->typ=="spc" .and. oo_bld->wdo$"fun-udf-prg-rid" .and. oo_bld->SECTION $ "12345678"
   ÛTgetCom("fi")+" "+alltrim(oo_obj->PRG)Û
.next

   #  FILE EXTERNAL
.foreach link oo_bld->typ=="ext" .and. oo_bld->SECTION $ "12345678"
   .M->cPath := if(!empty(toObject("objectpath")),toObject("objectpath")+[\],[])
   ÛTgetCom("fi")+" "+cPath+alltrim(oo_obj->PRG)Û
.next

   #  OGGETTI Visual dBSEE
.foreach link oo_bld->typ $ "drv-frm-brw-prn-qry" .and. oo_bld->SECTION $ "12345678"
   .M->cTprg := AllTrim(oo_obj->PRG)
   .if Lower(cTini) != Lower(cTprg)
   ÛTgetCom("fi")+" "+cTprgÛ
   .endif
.next

   MODULE Errorsys FROM dBsee4o

   #  LIBRERIE ALLOCATE
   .inj LNK5 Posizione per librerie ALLOCATE prima della libreria Visual dBSEE
   Allocate dBsee4o
.foreach link oo_bld->typ=="lib" .and. oo_bld->SECTION $ "12345678"
   .M->cPath := if(!empty(toObject("objectpath")),toObject("objectpath")+[\],[])
   ÛTgetCom("Allocate")+" "+cPath+alltrim(oo_obj->PRG)+"."+oo_obj->EXTÛ
.next
   .inj LNK6 Posizione per librerie ALLOCATE
   Allocate Extend

ENDAREA

.inj LNK8 Dopo ENDAREA ma prima del comando Lib Clipper

#  LIBRERIE
Lib Clipper
.do rddlib
.inj LNK9 Dopo il comando Lib Clipper
.foreach link oo_bld->typ=="lib" .and. oo_bld->SECTION=="9"
.M->cPath := if(!empty(toObject("objectpath")),toObject("objectpath")+[\],[])
ÛTgetCom("Lib")+" "+cPath+alltrim(oo_obj->PRG)+"."+oo_obj->EXTÛ
.next

.close
.dbusrOld()
